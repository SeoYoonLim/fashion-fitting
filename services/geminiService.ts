
import { GoogleGenAI, Modality, GenerateContentResponse } from "@google/genai";
import { ImageFile } from '../types';

function base64ToGenerativePart(base64: string, mimeType: string) {
  return {
    inlineData: {
      data: base64,
      mimeType
    },
  };
}

export const generateFittingImage = async (
  modelImage: ImageFile,
  topImage: ImageFile,
  bottomImage: ImageFile
): Promise<string> => {
  const apiKey = process.env.API_KEY;
  if (!apiKey) {
    throw new Error("API_KEY environment variable not set");
  }

  const ai = new GoogleGenAI({ apiKey });

  const prompt = `From the three provided images, generate a new, photorealistic image.
  - The person from the first image should be the subject.
  - The top (e.g., shirt, t-shirt, blouse) from the second image should be worn by the person.
  - The bottom (e.g., pants, skirt, shorts) from the third image should also be worn by the person.
  The final output should be a single, cohesive image of the person wearing the full outfit. Maintain the person's pose and background as much as possible.`;

  const modelImagePart = base64ToGenerativePart(modelImage.base64, modelImage.mimeType);
  const topImagePart = base64ToGenerativePart(topImage.base64, topImage.mimeType);
  const bottomImagePart = base64ToGenerativePart(bottomImage.base64, bottomImage.mimeType);

  try {
    const response: GenerateContentResponse = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          { text: prompt },
          modelImagePart,
          topImagePart,
          bottomImagePart
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates?.[0]?.content?.parts || []) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        const mimeType = part.inlineData.mimeType;
        return `data:${mimeType};base64,${base64ImageBytes}`;
      }
    }
    throw new Error("No image was generated by the API.");
  } catch (error) {
    console.error("Error generating image with Gemini API:", error);
    throw new Error("Failed to generate virtual fitting image. Please check the console for details.");
  }
};
